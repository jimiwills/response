.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Statistics::Reproducibility 3"
.TH Statistics::Reproducibility 3 "2014-03-12" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Statistics::Reproducibility \- Reproducibility measurement between multiple replicate experiments
.SH "VERSION"
.IX Header "VERSION"
Version 0.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module facilitates investigation of reproducbility between multiple replicates of
quantitative experiments e.g. \s-1SILAC\s0 or microarray.  Scatter plots are great, but
only 2d.  Some people use correlation as a proxy for reproducibility, but it's not right.
This module helps you through the following items...
.PP
1) Summarize reproducibility across the replicates
2) Pick out replicates that agree more or less
3) Summarize reproducibility for individual proteins/genes/whatever
4) Set a cutoff for what you can call significant, based on precision
5) Deal with missing values (common in \s-1SILAC\s0)
.PP
This works by going through the following steps:
.PP
(0) Choose a dataset to compare everything else to (the middlemost)
1) Put the middle of the data at (0,0,0,0...) by subtracting the median ... report the median
2) Rotate the data so the line x=y=z=... lies on a single axis.  The data should be spread along this axis.
3) Do regression on the data and work out \*(L"wrongness\*(R" of each replicate (!)
4) Calculate and report ratio variance and imprecision variance
5) Report combined ratio and error for each protein/gene/whatever
.PP
Perhaps a little code snippet.
.PP
.Vb 1
\&    use Statistics::Reproducibility;
\&
\&    my $r = Statistics::Reproducibility\->new();
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
.SS "derive"
.IX Subsection "derive"
derives a new object from an old one... some fields are conserved.
Warning: references are copied, so m and c point to the same arrays!
However, if you run \fIregression()\fR again, they will point to new arrays.
Data is set up with k empty columns.
.SS "data"
.IX Subsection "data"
Set the data.  Should be rectangular, i.e. all columns the same length, and 
we'll check it is and croak if not... 
but can contain \*(L"empty\*(R" cells (empty string), which represent missing values
in the data.
.PP
returns the object for chaining.
.SS "run"
.IX Subsection "run"
runs a recommended workflow.  it's a shortcut for:
.PP
.Vb 6
\&    my $m = $r\->subtractMedian();
\&    $m\->middlemostColumn();
\&    my $d = $m\->deDiagonalize();
\&    $d \-> regression();
\&    my $e = $d\->rotateToRegressionLine();
\&    $e\->variances();
.Ve
.PP
It returns the last object. So you could do:
.PP
.Vb 5
\&    my $results = Statistics::Reproducibility
\&        \->new()
\&        \->data($mydata)
\&        \->run()
\&        \->printableTable($depth);
.Ve
.SS "subtractMedian"
.IX Subsection "subtractMedian"
calculates the median for each column, substracts from each column and
returns the new object.
.SS "middlemostColumn"
.IX Subsection "middlemostColumn"
Calculates which of the columns is middlemost and remembers it so all 
others are compared to it.  This can be done instead of using a constructed
median dataset as the comparator so that the constructed one does not add to
the spread, and does not contribute to the observation count.
.PP
Note: the method of scoring the columns involves counting which has
the most middlemost values. For two columns only, the result will always
be the one with the least missing values.  I don't think there's anything
wrong with that, but just so you know!
.SS "constructMedianLeft"
.IX Subsection "constructMedianLeft"
Make a median column and pop it on the left. Note that the
regular median is used here, not the Quick Median estimator.  This means
that for an even number of observations, the mean of the two middlemost is 
used, which is not the case for Quick Median.
.SS "deDiagonalize"
.IX Subsection "deDiagonalize"
Replicated data with some spread will naturally lie along the diagonal line,
y=x (in 2 dimensions, or z=y=x... in more).  This function aligns the data 
along one axis by rotation.  This is done so that (a) errors are measured
approximately perpendicular to the spread of data and (b) unspread data 
(a ball of points) gives a gradient of zero in Theil Sen estimator, which is
correct because if there's no experimental spread then there can be no
evidence that the replicates disagree.
.PP
Note: at this point, any missing values are \s-1REPLACED\s0 \s-1BY\s0 \s-1ZEROS\s0!  This means
that these data point will not disagree with any \*(L"unchanging\*(R" data, but they
will not support the reproducibility of \*(L"changed\*(R" data (data for proteins/genes)
that are regulated).  The effect of this is that those points will not appear as
extreme in the output and will also have a larger error associated with them.
.PP
A \s-1NEW\s0 object is returned! comparatorIndex is honoured and conserved,
meaning that if you ran middlemostColumn, the result is the column used
as the Y axis in all comparisons, and the column itself will contain the
experimental variance.
.SS "countObservations"
.IX Subsection "countObservations"
Counts the number of observations present in each point and stores in obs.
The result is used by applyMinimumObservations to check for unwanted data
before a processing event which turns empties into zeros (like deDiagonalize).
.SS "applyMinimumObservations"
.IX Subsection "applyMinimumObservations"
A method that blanks any data that does not have a minimum number of
values, e.g. if the minimum were 2, the point [2,3,undef] would be fine
but [2,undef,undef] would become [undef,undef,undef]
.SS "regression"
.IX Subsection "regression"
Perform Theil Sen Estimator regression on the data.  The regression is
done with the comparator on the x axis, but the symmetric parameters
are returned for the comparator on the y\-axis.
.SS "rotateToRegressionLine"
.IX Subsection "rotateToRegressionLine"
do we need this?
.SS "variances"
.IX Subsection "variances"
Calculate variances... i.e. distances from the origin along the line of 
regression, and distances from the line of regression.  This is just like
deDiagonalise, except that only two columns are returned.
.SS "printableTable, printTable"
.IX Subsection "printableTable, printTable"
printableTable returns all available relevant info in a table
printTable prints all available relevant info in a table
.PP
the firts element returned is a list of columns.  the rest are the columns.
.PP
data stored are:
.PP
.Vb 8
\&    # scalars:
\&    comparatorIndex             # index of column used to compare
\&    k
\&    n
\&    vE                          # variance of "error" (imprecision)
\&    vS                          # variable of experimental spread
\&    sdE                         # s.d. error
\&    sdS                         # s.d. spread
\&    
\&    # arrays (foreach column)
\&    m                           # regression denominator 
\&    c                           # regression constant 
\&    # arrays (foreach row)
\&    d                           # distance from regression line
\&    pee                         # p\-value of error 
\&    pss                         # p\-value of spread
\&    pes                         # p\-value of error over spread (??)
\&    pse                         # p\-value of spread over error
\&    
\&    # 2D array (LoL)
\&    data
\&    
\&    note that the distance from the center of the distribution
\&    is given by the values in data[comparatorIndex]
.Ve
.PP
These methods take a single argumen: depth.  Every time an object is
derived from another (subtractMedian, deDiagonalize and 
rotateToRegressionLine all do this) the old object is referenced, and
you can include the last \f(CW$depth\fR objects in the output.  Set depth to \-1
to include all objects.
.SH "just some wee helper functions..."
.IX Header "just some wee helper functions..."
.SS "median"
.IX Subsection "median"
yes this probably exists in other modules, but I didn't want to pull in a whole
module for just one funciton.  Anyway, this is an inefficient version for small
numbers of data.  It sorts the list and then uses \fImiddle()\fR to find the middle of
the sorted list.
.SS "medianN"
.IX Subsection "medianN"
Like median, but for an even list is returns the two middlemost values.
This version is used in medianI.
.SS "medianI"
.IX Subsection "medianI"
This uses medianN to get the middlemost value(s) and then returns a list
of column indices indicating which columns had a middlemost value.
This is used in the medianLeft method when deciding which 
column is middlemost.
.SS "middle"
.IX Subsection "middle"
middle returns the middlemost item in a list, or the mean average of the two
middlemost items.  It doesn't sort the list first.
.SS "middleN"
.IX Subsection "middleN"
middleN does like middle, but for even lists, it returns the two middlemost
items as a list.  This is used by medianN.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jimi Wills, \f(CW\*(C`<jimi at webu.co.uk>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-statistics\-reproducibility at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Statistics\-Reproducibility <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Statistics-Reproducibility>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Statistics::Reproducibility
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Statistics\-Reproducibility <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Statistics-Reproducibility>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Statistics\-Reproducibility <http://annocpan.org/dist/Statistics-Reproducibility>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Statistics\-Reproducibility <http://cpanratings.perl.org/d/Statistics-Reproducibility>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Statistics\-Reproducibility/ <http://search.cpan.org/dist/Statistics-Reproducibility/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Jimi Wills.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE\s0 \s-1PACKAGE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \s-1BY\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0
\&\s-1AND\s0 \s-1CONTRIBUTORS\s0 "\s-1AS\s0 \s-1IS\s0' \s-1AND\s0 \s-1WITHOUT\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0.
\&\s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0, \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0
\&\s-1PURPOSE\s0, \s-1OR\s0 NON-INFRINGEMENT \s-1ARE\s0 \s-1DISCLAIMED\s0 \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0
\&\s-1YOUR\s0 \s-1LOCAL\s0 \s-1LAW\s0. \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1LAW\s0, \s-1NO\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0 \s-1OR\s0
\&\s-1CONTRIBUTOR\s0 \s-1WILL\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1INCIDENTAL\s0, \s-1OR\s0
\&\s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THE\s0 \s-1PACKAGE\s0,
\&\s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0 \s-1DAMAGE\s0.
