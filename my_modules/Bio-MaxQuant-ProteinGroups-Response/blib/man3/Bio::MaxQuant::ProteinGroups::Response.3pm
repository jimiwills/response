.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::MaxQuant::ProteinGroups::Response 3"
.TH Bio::MaxQuant::ProteinGroups::Response 3 "2014-03-09" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::MaxQuant::ProteinGroups::Response \- Analyze MQ proteinGroups for differential responses
.SH "VERSION"
.IX Header "VERSION"
Version 0.02
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module is tailored for MaxQuant data, but could be applicable elsewhere.
The target experiment is one where several celltypes have been assayed for 
responses to different conditions, e.g. cancer cell lines responding to 
hormones and drugs.  The module help to analyse responses to the conditions
within each cell line and differences in those responses between cell lines.
Those differences in responses indicate that the proteins involved are markers
of the mechanism by which the cells differ in their response, and are therefore
not only good targets to exploit for biomarkers, but also for biological follow up.
.PP
.Vb 1
\&    use Bio::MaxQuant::ProteinGroups::Response;
\&
\&    my $resp = Bio::MaxQuant::ProteinGroups::Response\->new(
\&        filepath=>\*(AqproteinGroups.txt\*(Aq
\&    );
\&
\&    $resp\->replicate_comparison(output_directory=>\*(Aq./replicate_comparisons\*(Aq);
\&        $resp\->calculate_response_comparisons(output_directory=>\*(Aq./responses\*(Aq);
\&        $resp\->calculate_differential_response_comparisons(output_directory=>\*(Aq./differential_responses\*(Aq);
.Ve
.PP
The data are output as tables in the directories.  They are the printable tables
returned from Statistics::Reproducibility.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "new"
.IX Subsection "new"
creates a new ProteinGroups object.
.PP
Options: 
filepath \- path to the file!  default is proteinGroups.txt
separator \- \s-1NOT\s0 table separator! This is the separator 
used in the experiment name to separate cellline from 
condition from replicate.  Default is full stop (period)
rseparator \- used for separating the compared cells/conditions.
the default is hyphen (\-)
replicate_indicator \- used in differential response comparisons
to indicate which cell the individual replicates were compared
(with the median of the other cell)
.SS "resultsfile"
.IX Subsection "resultsfile"
returns a handle to the results file, ready for writing.
.PP
this is not callde until processing starts, but when it is
it will clobber the old file.
.SS "experiments"
.IX Subsection "experiments"
Returns the list of experiments in the file as a hash.
Keys are names, values are listrefs of cellline,condition,replicate.
Caches! So once called, it will not re-read the file
unless/until you delete \f(CW$o\fR\->{experiments}
.PP
Also populates cellines, conditions and replicates lists, which are
accessible by their own accessors.
.SS "quickNormalize"
.IX Subsection "quickNormalize"
\&\s-1TO\s0 \s-1BE\s0 \s-1REMOVED\s0
.PP
Does a quick normalization of \s-1ALL\s0 the input columns.  They are each normalized
by their own median, and not directly to each other.
.PP
Two options are available:
.PP
.Vb 2
\&        select => [list of indices]
\&        exclude => [list of indices]
.Ve
.PP
Select allows to choose a particular subset of rows on which to normalize, e.g. some
proteins you know don't change.
Exclude allows to choose a particular subset of rows to exclude from the
normalization, e.g. contaminants.
.PP
sub quickNormalize {
	my ($o,%opts) = \f(CW@_\fR;
	my \f(CW$d\fR = \f(CW$o\fR\->data;
	my \f(CW$n\fR = \f(CW$o\fR\->{n};
	my \f(CW@I\fR = (0..$n\-1);
	if($opts{exclude}){
		my \f(CW%I\fR;
		\f(CW@I\fR{@I} = \f(CW@I\fR;
		delete \f(CW$I\fR{$_} foreach @{$opts{exclude}};
		\f(CW@I\fR = sort {$a <=> \f(CW$b\fR} keys \f(CW%I\fR;
	}
	if($opts{select}){
		\f(CW@I\fR = @{$opts{select}};
	}
	\f(CW$o\fR\->{quicknorm} = {
		map {
			my \f(CW$med\fR = median ((@{$d\->{$_}})[@I]);
			($_ => [map {/\ed/ ? \f(CW$_\fR \- med : ''} @{$d\->{$_}}])
		} 
		keys %$d;
	}
}
.PP
\&\s-1TO\s0 \s-1BE\s0 \s-1REMOVED\s0
.SS "blankRows"
.IX Subsection "blankRows"
Option: select (as for quick Normalize)
.PP
This allows blanking the data for a subset (e.g. contaminants) so that they do not
contribute to the statistics.
.SS "blankItems"
.IX Subsection "blankItems"
help function, accepts a listref and a list of indices to blank (set to '')
returns the listref for your convenience.
.SS "celllines"
.IX Subsection "celllines"
Returns the list of cell lines.  Ensures \fIexperiments()\fR is called.
.SS "conditions"
.IX Subsection "conditions"
Returns the list of conditions.  Ensures \fIexperiments()\fR is called.
.SS "condition_replicates"
.IX Subsection "condition_replicates"
Returns a hash of key=conditions, value=list of replicates.
Ensures \fIexperiments()\fR is called.
.SS "replicates"
.IX Subsection "replicates"
Returns the list of replicates.  Ensures \fIexperiments()\fR is called.
.SS "parse_experiment_name"
.IX Subsection "parse_experiment_name"
Method  to parse the experiment name.
Uses \f(CW$o\fR\->{separator} to separate into 3 parts.  Uses index and
substr, not regexes.  Default separator is dot/fullstop/period \*(L".\*(R" .
.SS "parse_response_name"
.IX Subsection "parse_response_name"
Method  to parse the response name.
Uses \f(CW$o\fR\->{rseparator} to separate into 3 parts.  Uses index and
substr, not regexes.  Default separator is hyphen \*(L"\-\*(R", which
should not be used in experiment name!
.SS "replicate_comparison"
.IX Subsection "replicate_comparison"
Uses Statistics::Reproducibility to get normalized values and
metrics on each condition.
.PP
Caches!
.SS "response_comparisons"
.IX Subsection "response_comparisons"
Returns the list of comparisons that can be made between conditions
within each cell line, given the replicates available.
.PP
At least 2 replicates must be available for a comparison to be made.
.PP
Caches.
.SS "differential_response_comparisons"
.IX Subsection "differential_response_comparisons"
Returns the list of comparisons that can be made between cell line
responses to a each condition.
.PP
Caches.
.SS "data"
.IX Subsection "data"
Reads in all the protein ratios from the proteinGroups file.
Also reads other identifying information, such as id and Leading 
Proteins.  Reads each non-normalized ratio column into a list and
stores them in a hash by experiment name.
.SS "datum"
.IX Subsection "datum"
Converts one datum into a logged ratio or an empty string, depending.
.SS "calculate_response_comparisons"
.IX Subsection "calculate_response_comparisons"
calculates the differences between conditions in a cell type.
outputs a bunch of files.  You can specify the diretory with 
output_directory option.
.SS "sigfigs"
.IX Subsection "sigfigs"
Helper function
Tries FormatSigFigs($_[0],$SigFigs), but only if \f(CW$_\fR[0] actually looks like a number!
\&\f(CW$SigFigs\fR is a global in this module and is set to 3.
.SS "calculate_differential_response_comparisons"
.IX Subsection "calculate_differential_response_comparisons"
.SS "medians"
.IX Subsection "medians"
calculates the medians for all replicate sets and stores them in 
\&\f(CW$o\fR\->{medians}
.SS "put_resultsfile_hashtable"
.IX Subsection "put_resultsfile_hashtable"
a method called by \fImedians()\fR if resultsfile was defined.  Calls put_resultsfile with
some medians and normalized data.
.SS "dumpHashtable"
.IX Subsection "dumpHashtable"
helper function that dumps a HoL as a tab delimited table.
.SS "median"
.IX Subsection "median"
helper function that does a simple median calculation
.SS "put_resultsfile"
.IX Subsection "put_resultsfile"
take a list of lists (ref) and outputs directly to \f(CW$o\fR\->{resultsfile}.
This is as an alternative or addition to the output_file options
avaiable for some methods, and is called by dump_results_table
and others throughout processing.
.SS "dump_results_table"
.IX Subsection "dump_results_table"
Dumps a results table to a file ($o\->{complete_results_file})
for laster use.
.SS "translate_results_table"
.IX Subsection "translate_results_table"
helper function that separates out and better labels the different results from 
Statistics::Reproducbility
.SH "AUTHOR"
.IX Header "AUTHOR"
Jimi, \f(CW\*(C`<j at 0na.me>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-bio\-maxquant\-proteingroups\-response at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Bio\-MaxQuant\-ProteinGroups\-Response <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Bio-MaxQuant-ProteinGroups-Response>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Bio::MaxQuant::ProteinGroups::Response
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Bio\-MaxQuant\-ProteinGroups\-Response <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Bio-MaxQuant-ProteinGroups-Response>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Bio\-MaxQuant\-ProteinGroups\-Response <http://annocpan.org/dist/Bio-MaxQuant-ProteinGroups-Response>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Bio\-MaxQuant\-ProteinGroups\-Response <http://cpanratings.perl.org/d/Bio-MaxQuant-ProteinGroups-Response>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Bio\-MaxQuant\-ProteinGroups\-Response/ <http://search.cpan.org/dist/Bio-MaxQuant-ProteinGroups-Response/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2014 Jimi.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE\s0 \s-1PACKAGE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \s-1BY\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0
\&\s-1AND\s0 \s-1CONTRIBUTORS\s0 "\s-1AS\s0 \s-1IS\s0' \s-1AND\s0 \s-1WITHOUT\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0.
\&\s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0, \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0
\&\s-1PURPOSE\s0, \s-1OR\s0 NON-INFRINGEMENT \s-1ARE\s0 \s-1DISCLAIMED\s0 \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0
\&\s-1YOUR\s0 \s-1LOCAL\s0 \s-1LAW\s0. \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1LAW\s0, \s-1NO\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0 \s-1OR\s0
\&\s-1CONTRIBUTOR\s0 \s-1WILL\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1INCIDENTAL\s0, \s-1OR\s0
\&\s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THE\s0 \s-1PACKAGE\s0,
\&\s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0 \s-1DAMAGE\s0.
